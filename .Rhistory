theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
ggplot(data = d.cpue %>% count(das_year), aes(x = das_year, y = n)) +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Number of available data") +
geom_line() +
geom_point() +
theme_bw()
#Create a standard function to make bar plots for the various variables to be summarized
f.barplot = function(seriesdata, x.value, x.title, x.label.rotate = 0, legend_position = "none"){
ggplot(data = seriesdata) +
geom_bar(aes(x=x.value, fill = filtered)) +
scale_x_discrete(name = x.title) +
scale_y_continuous(expand = expansion(mult = c(0,0.1)),
breaks = pretty_breaks()) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = x.label.rotate),
axis.title.y = element_blank(),
legend.position=legend_position,
legend.justification="right",
legend.title=element_blank())
}
#Create individual bar plots
p.country = f.barplot(seriesdata = d.series,
x.value = d.series$ser_cou_code,
x.title =  "Country",
x.label.rotate = 90,
legend_position = "none")
p.habitat = f.barplot(seriesdata = d.series,
x.value = d.series$ser_hty_code,
x.title =  "Habitat type",
x.label.rotate = 0,
legend_position = "top")
p.gear = f.barplot(seriesdata = d.series,
x.value = d.series$ser_sam_gear,
x.title =  "Gear type",
x.label.rotate = 0,
legend_position = "none")
p.sampling = f.barplot(seriesdata = d.series,
x.value = d.series$sam_samplingtype,
x.title =  "Sampling type",
x.label.rotate = 0,
legend_position = "none")
p.quality = f.barplot(seriesdata = d.series,
x.value = d.series$ser_qal_id,
x.title =  "Quality ID",
x.label.rotate = 0,
legend_position = "none")
p.stocking = f.barplot(seriesdata = d.series,
x.value = d.series$ser_restocking,
x.title =  "Stocking",
x.label.rotate = 0,
legend_position = "none")
p.ecoregion = f.barplot(seriesdata = d.series,
x.value = d.series$ecoregion,
x.title =  "Ecoregion",
x.label.rotate = 0,
legend_position = "none")
#Put all bar plots in a single figure
p.summary = ggarrange(p.country, p.habitat, p.gear, p.sampling, p.quality, p.stocking, p.ecoregion,
ncol = 2, nrow = 4)
p.summary = annotate_figure(p.summary,
left = text_grob("Number of available series", color = "black", rot = 90),
)
p.summary
#Create a standard function to make bar plots for the various variables to be summarized
f.barplot = function(seriesdata, x.value, x.title, x.label.rotate = 0, legend_position = "none"){
ggplot(data = seriesdata) +
geom_bar(aes(x=x.value, fill = filtered)) +
scale_x_discrete(name = x.title) +
scale_y_continuous(expand = expansion(mult = c(0,0.1)),
breaks = pretty_breaks()) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = x.label.rotate),
axis.title.y = element_blank(),
legend.position=legend_position,
legend.title=element_blank())
}
#Create individual bar plots
p.country = f.barplot(seriesdata = d.series,
x.value = d.series$ser_cou_code,
x.title =  "Country",
x.label.rotate = 90,
legend_position = "none")
p.habitat = f.barplot(seriesdata = d.series,
x.value = d.series$ser_hty_code,
x.title =  "Habitat type",
x.label.rotate = 0,
legend_position = c(0.8,0.8))
p.gear = f.barplot(seriesdata = d.series,
x.value = d.series$ser_sam_gear,
x.title =  "Gear type",
x.label.rotate = 0,
legend_position = "none")
p.sampling = f.barplot(seriesdata = d.series,
x.value = d.series$sam_samplingtype,
x.title =  "Sampling type",
x.label.rotate = 0,
legend_position = "none")
p.quality = f.barplot(seriesdata = d.series,
x.value = d.series$ser_qal_id,
x.title =  "Quality ID",
x.label.rotate = 0,
legend_position = "none")
p.stocking = f.barplot(seriesdata = d.series,
x.value = d.series$ser_restocking,
x.title =  "Stocking",
x.label.rotate = 0,
legend_position = "none")
p.ecoregion = f.barplot(seriesdata = d.series,
x.value = d.series$ecoregion,
x.title =  "Ecoregion",
x.label.rotate = 0,
legend_position = "none")
#Put all bar plots in a single figure
p.summary = ggarrange(p.country, p.habitat, p.gear, p.sampling, p.quality, p.stocking, p.ecoregion,
ncol = 2, nrow = 4)
p.summary = annotate_figure(p.summary,
left = text_grob("Number of available series", color = "black", rot = 90),
)
p.summary
#Create a standard function to make bar plots for the various variables to be summarized
f.barplot = function(seriesdata, x.value, x.title, x.label.rotate = 0, legend_position = "none"){
ggplot(data = seriesdata) +
geom_bar(aes(x=x.value, fill = filtered)) +
scale_x_discrete(name = x.title) +
scale_y_continuous(expand = expansion(mult = c(0,0.1)),
breaks = pretty_breaks()) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = x.label.rotate),
axis.title.y = element_blank(),
legend.position=legend_position,
legend.title=element_blank(),
legend.text = element_text(size=8))
}
#Create individual bar plots
p.country = f.barplot(seriesdata = d.series,
x.value = d.series$ser_cou_code,
x.title =  "Country",
x.label.rotate = 90,
legend_position = "none")
p.habitat = f.barplot(seriesdata = d.series,
x.value = d.series$ser_hty_code,
x.title =  "Habitat type",
x.label.rotate = 0,
legend_position = c(0.8,0.8))
p.gear = f.barplot(seriesdata = d.series,
x.value = d.series$ser_sam_gear,
x.title =  "Gear type",
x.label.rotate = 0,
legend_position = "none")
p.sampling = f.barplot(seriesdata = d.series,
x.value = d.series$sam_samplingtype,
x.title =  "Sampling type",
x.label.rotate = 0,
legend_position = "none")
p.quality = f.barplot(seriesdata = d.series,
x.value = d.series$ser_qal_id,
x.title =  "Quality ID",
x.label.rotate = 0,
legend_position = "none")
p.stocking = f.barplot(seriesdata = d.series,
x.value = d.series$ser_restocking,
x.title =  "Stocking",
x.label.rotate = 0,
legend_position = "none")
p.ecoregion = f.barplot(seriesdata = d.series,
x.value = d.series$ecoregion,
x.title =  "Ecoregion",
x.label.rotate = 0,
legend_position = "none")
#Put all bar plots in a single figure
p.summary = ggarrange(p.country, p.habitat, p.gear, p.sampling, p.quality, p.stocking, p.ecoregion,
ncol = 2, nrow = 4)
p.summary = annotate_figure(p.summary,
left = text_grob("Number of available series", color = "black", rot = 90),
)
p.summary
#Create a standard function to make bar plots for the various variables to be summarized
f.barplot = function(seriesdata, x.value, x.title, x.label.rotate = 0, legend_position = "none"){
ggplot(data = seriesdata) +
geom_bar(aes(x=x.value, fill = filtered)) +
scale_x_discrete(name = x.title) +
scale_y_continuous(expand = expansion(mult = c(0,0.1)),
breaks = pretty_breaks()) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = x.label.rotate),
axis.title.y = element_blank(),
legend.position=legend_position,
legend.title=element_blank(),
legend.text = element_text(size=8))
}
#Create individual bar plots
p.country = f.barplot(seriesdata = d.series,
x.value = d.series$ser_cou_code,
x.title =  "Country",
x.label.rotate = 90,
legend_position = "none")
p.habitat = f.barplot(seriesdata = d.series,
x.value = d.series$ser_hty_code,
x.title =  "Habitat type",
x.label.rotate = 0,
legend_position = c(0.85,0.8))
p.gear = f.barplot(seriesdata = d.series,
x.value = d.series$ser_sam_gear,
x.title =  "Gear type",
x.label.rotate = 0,
legend_position = "none")
p.sampling = f.barplot(seriesdata = d.series,
x.value = d.series$sam_samplingtype,
x.title =  "Sampling type",
x.label.rotate = 0,
legend_position = "none")
p.quality = f.barplot(seriesdata = d.series,
x.value = d.series$ser_qal_id,
x.title =  "Quality ID",
x.label.rotate = 0,
legend_position = "none")
p.stocking = f.barplot(seriesdata = d.series,
x.value = d.series$ser_restocking,
x.title =  "Stocking",
x.label.rotate = 0,
legend_position = "none")
p.ecoregion = f.barplot(seriesdata = d.series,
x.value = d.series$ecoregion,
x.title =  "Ecoregion",
x.label.rotate = 0,
legend_position = "none")
#Put all bar plots in a single figure
p.summary = ggarrange(p.country, p.habitat, p.gear, p.sampling, p.quality, p.stocking, p.ecoregion,
ncol = 2, nrow = 4)
p.summary = annotate_figure(p.summary,
left = text_grob("Number of available series", color = "black", rot = 90),
)
p.summary
git merge --abort
knitr::opts_chunk$set(echo = FALSE, warning=FALSE,message=FALSE)
library(RPostgres)
library(sf)
library(getPass)
library(ggforce)
library(ggplot2)
library(flextable)
library(tidyverse)
library(yaml)
cred=read_yaml("../../credentials.yml")
con = dbConnect(Postgres(), dbname=cred$dbname,host=cred$host,port=cred$port,user=cred$user, password=getPass())
load("../../data/ref_and_eel_data.Rdata")
eu_cou_codes=c("AT",	"BE",	"BG",	"HR",	"CY",	"CZ",	"DK",	"EE",	"FI",	"FR",	"DE",	"GR",	"HU",	"IE",	"IT",	"LV",	"LT",	"LU",	"MT",	"NL",	"PL",	"PT",	"RO",	"SK",	"SI",	"ES",	"SE")
biomass <- dbGetQuery(con,"select e.* from datawg.t_eelstock_eel e  where eel_qal_id in (0,1,2,3,4) and eel_typ_id in (13,14,15)")
con = dbConnect(Postgres(), dbname=cred$dbname,host=cred$host,port=cred$port,user=cred$user, password=getPass())
con = dbConnect(Postgres(), dbname=cred$dbname,host=cred$host,port=cred$port,user=cred$user, password=getPass())
cred=read_yaml("../../credentials.yml")
con = dbConnect(Postgres(), dbname=cred$dbname,host=cred$host,port=cred$port,user=cred$user, password=getPass())
biomass <- dbGetQuery(con,"select e.* from datawg.t_eelstock_eel e  where eel_qal_id in (0,1,2,3,4) and eel_typ_id in (13,14,15)")
mortality <- dbGetQuery(con,"select e.* from datawg.t_eelstock_eel e where eel_qal_id in (0,1,2,3,4) and eel_typ_id in (17,18,19)")
nb_country_emu <- dbGetQuery(con,"select count(distinct eel_cou_code),count(distinct(eel_emu_nameshort)) from datawg.t_eelstock_eel
where eel_typ_id in (13, 14, 15, 17, 18, 19) and eel_datasource='dc_2021'")
not_reported=country_p$cou_code[! country_p$cou_code %in% c(biomass$eel_cou_code , mortality$eel_cou_code)]
not_reported=country_ref$cou_code[! country_ref$cou_code %in% c(biomass$eel_cou_code , mortality$eel_cou_code)]
sort(country_ref$cou_country[! country_ref$cou_code %in% c(biomass$eel_cou_code , mortality$eel_cou_code)])
landings=dbGetQuery(con,paste0("select eel_value,eel_cou_code,eel_lfs_code,eel_year from datawg.t_eelstock_eel where eel_cou_code in ('",
paste(not_reported, collapse="','"),
"') and eel_typ_id in (4,6) and eel_qal_id in (0,1,4) and eel_year >=2020")) %>%
group_by(eel_year,eel_lfs_code,eel_cou_code) %>%
summarize(eel_value=sum(eel_value,na.rm=TRUE)) %>%
group_by(eel_cou_code,eel_lfs_code) %>%
summarize(landings=mean(eel_value, na.rm=TRUE)/1e3) %>%
pivot_wider(names_from=eel_lfs_code, values_from=landings)
tot_landings=dbGetQuery(con,paste0("select eel_value,eel_lfs_code,eel_year from datawg.t_eelstock_eel where eel_typ_id in (4,6) and eel_qal_id in (0,1,4) and eel_year >=2020")) %>%
group_by(eel_year,eel_lfs_code) %>%
summarize(eel_value=sum(eel_value,na.rm=TRUE)) %>%
group_by(eel_lfs_code) %>%
summarize(landings=mean(eel_value, na.rm=TRUE)/1e3) %>%
mutate(eel_cou_code="OVERALL TOTAL") %>%
pivot_wider(names_from=eel_lfs_code, values_from=landings)
flextable(landings %>%
filter(eel_cou_code %in%eu_cou_codes) %>%
bind_rows(tot_landings) %>%
select(eel_cou_code,G,Y,YS,S,AL)) %>%
colformat_double(digits=1)
flextable(landings %>%
filter(eel_cou_code %in%eu_cou_codes) %>%
bind_rows(tot_landings) %>%
select(eel_cou_code,G,Y,YS,S)) %>%
colformat_double(digits=1)
View(landings)
test = biomass %>%
View(biomass)
View(aquaculture)
View(biomass)
test = biomass %>%
filter(eel_typ_id == 15, )
filter(eel_typ_id == 15, )
test = biomass %>%
filter(eel_typ_id == 15,
eel_qal_id == 1)
View(test)
test = biomass %>%
filter(eel_typ_id == 13,
eel_qal_id == 1)
test = biomass %>%
filter(eel_typ_id == 13,
eel_qal_id == 1) %>%
group_by(eel_emu_nameshort) %>%
summarise(n())
View(test)
test = biomass %>%
filter(eel_typ_id == 13) %>%
group_by(eel_emu_nameshort, eel_qal_id) %>%
summarise(n())
View(test)
test = biomass %>%
filter(eel_typ_id == 13) %>%
group_by(eel_emu_nameshort) %>%
summarise(n())
View(test)
knitr::opts_chunk$set(echo = FALSE, warning=FALSE,message=FALSE)
library(RPostgres)
library(sf)
library(getPass)
library(ggforce)
library(ggplot2)
library(flextable)
library(tidyverse)
library(yaml)
cred=read_yaml("../../credentials.yml")
con = dbConnect(Postgres(), dbname=cred$dbname,host=cred$host,port=cred$port,user=cred$user, password=getPass())
load("../../R/shiny_data_visualisation/shiny_dv/data/maps_for_shiny.Rdata")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE,message=FALSE)
library(RPostgres)
library(sf)
library(getPass)
library(ggforce)
library(ggplot2)
library(flextable)
library(tidyverse)
library(yaml)
cred=read_yaml("../../credentials.yml")
con = dbConnect(Postgres(), dbname=cred$dbname,host=cred$host,port=cred$port,user=cred$user, password=getPass())
load("../../R/shiny_data_visualisation/shiny_dv/data/maps_for_shiny.Rdata")
load("../..//R/shiny_data_visualisation/shiny_dv/data/ref_and_eel_data.Rdata")
eu_cou_codes=c("AT",	"BE",	"BG",	"HR",	"CY",	"CZ",	"DK",	"EE",	"FI",	"FR",	"DE",	"GR",	"HU",	"IE",	"IT",	"LV",	"LT",	"LU",	"MT",	"NL",	"PL",	"PT",	"RO",	"SK",	"SI",	"ES",	"SE")
biomass <- dbGetQuery(con,"select e.* from datawg.t_eelstock_eel e  where eel_qal_id in (0,1,2,3,4) and eel_typ_id in (13,14,15,34)")
mortality <- dbGetQuery(con,"select e.* from datawg.t_eelstock_eel e where eel_qal_id in (0,1,2,3,4) and eel_typ_id in (17,18,19)")
nb_country_emu <- dbGetQuery(con,"select count(distinct eel_cou_code),count(distinct(eel_emu_nameshort)) from datawg.t_eelstock_eel
where eel_typ_id in (13, 14, 15, 17, 18, 19,34) and eel_datasource='dc_2021'")
country_ref$cou_code[!country_ref$cou_code %in% country_p$cou_code]
not_reported=country_p$cou_code[! country_p$cou_code %in% c(biomass$eel_cou_code , mortality$eel_cou_code)]
sort(country_p$cou_country[! country_p$cou_code %in% c(biomass$eel_cou_code , mortality$eel_cou_code)])
test = biomass %>% filter(eel_cou_code == "FI")
View(test)
mortality = biomass %>% filter(eel_cou_code == "FI")
View(mortality)
sort(not_reported$cou_country)
sort(not_reported)
# Same, but only EU countires
not_reported_EU = not_reported[not_reported %in% eu_cou_codes]
sort(not_reported_EU)
landings=dbGetQuery(con,paste0("select eel_value,eel_cou_code,eel_lfs_code,eel_year from datawg.t_eelstock_eel where eel_cou_code in ('",
paste(not_reported, collapse="','"),
"') and eel_typ_id in (4,6) and eel_qal_id in (0,1,4) and eel_year >=2017")) %>%
group_by(eel_year,eel_lfs_code,eel_cou_code) %>%
summarize(eel_value=sum(eel_value,na.rm=TRUE)) %>%
group_by(eel_cou_code,eel_lfs_code) %>%
summarize(landings=mean(eel_value, na.rm=TRUE)/1e3) %>%
pivot_wider(names_from=eel_lfs_code, values_from=landings)
tot_landings=dbGetQuery(con,paste0("select eel_value,eel_lfs_code,eel_year from datawg.t_eelstock_eel where eel_typ_id in (4,6) and eel_qal_id in (0,1,4) and eel_year >=2017")) %>%
group_by(eel_year,eel_lfs_code) %>%
summarize(eel_value=sum(eel_value,na.rm=TRUE)) %>%
group_by(eel_lfs_code) %>%
summarize(landings=mean(eel_value, na.rm=TRUE)/1e3) %>%
mutate(eel_cou_code="OVERALL TOTAL") %>%
pivot_wider(names_from=eel_lfs_code, values_from=landings)
flextable(landings %>%
filter(eel_cou_code %in%eu_cou_codes) %>%
bind_rows(tot_landings) %>%
select(eel_cou_code,G,Y,YS,S,AL)) %>%
colformat_double(digits=1)
data_avail = rbind.data.frame(mortality,biomass) %>%
filter(!(is.na(eel_value) & eel_missvaluequal!="NP")) %>%
group_by(eel_emu_nameshort) %>%
summarize(b0=sum(eel_typ_id==13)>0,
bbest=sum(eel_typ_id==14)>0,
bcurrent=sum(eel_typ_id==15)>0,
bcurrent_without_stocking_kg=sum(eel_typ_id==34)>0,
suma=sum(eel_typ_id==17)>0,
sumf=sum(eel_typ_id==18)>0,
sumh=sum(eel_typ_id==19)>0) %>%
mutate(eel_emu_nameshort= ifelse(eel_emu_nameshort=="NL_total","NL_Neth",eel_emu_nameshort))
data_avail <- merge(emu_c, data_avail, by.x="emu_nameshort",by.y="eel_emu_nameshort",all.x=TRUE)
data_avail<- st_transform(data_avail, crs=3035)
data_avail$x <-st_coordinates(data_avail)[,1]
data_avail$y <-st_coordinates(data_avail)[,2]
data_avail$x[data_avail$emu_cou_code=="NO"] = 4172612.3
data_avail$y[data_avail$emu_cou_code=="NO"] = 4111023.3
data_avail<- data_avail %>%
mutate(bsummary=coalesce(b0+bbest+bcurrent+bcurrent_without_stocking_kg, 0),
mortsummary=coalesce(suma+sumf+sumh,0),
responded=ifelse(is.na(bsummary) & is.na(mortsummary), FALSE, TRUE))
ggplot(st_transform(country_p,crs=3035)) + geom_sf(fill=NA)+theme_bw()+
geom_point(data=data_avail,aes(x=x,y=y,fill=as.factor(bsummary)),shape=21)+
scale_fill_viridis_d("Biomass indicators",labels=c("none","one","two","three","four"))+
xlab("")+ylab("")
data_avail = rbind.data.frame(mortality,biomass) %>%
filter(!(is.na(eel_value) & eel_missvaluequal!="NP")) %>%
group_by(eel_emu_nameshort) %>%
summarize(b0=sum(eel_typ_id==13)>0,
bbest=sum(eel_typ_id==14)>0,
bcurrent=sum(eel_typ_id==15)>0,
bcurrent_without_stocking_kg=sum(eel_typ_id==34)>0,
suma=sum(eel_typ_id==17)>0,
sumf=sum(eel_typ_id==18)>0,
sumh=sum(eel_typ_id==19)>0) %>%
mutate(eel_emu_nameshort= ifelse(eel_emu_nameshort=="NL_total","NL_Neth",eel_emu_nameshort))
data_avail <- merge(emu_c, data_avail, by.x="emu_nameshort",by.y="eel_emu_nameshort",all.x=TRUE)
data_avail<- st_transform(data_avail, crs=3035)
data_avail$x <-st_coordinates(data_avail)[,1]
data_avail$y <-st_coordinates(data_avail)[,2]
data_avail$x[data_avail$emu_cou_code=="NO"] = 4172612.3
data_avail$y[data_avail$emu_cou_code=="NO"] = 4111023.3
data_avail<- data_avail %>%
mutate(bsummary=coalesce(b0+bbest+bcurrent+bcurrent_without_stocking_kg, 0),
mortsummary=coalesce(suma+sumf+sumh,0),
responded=ifelse(is.na(bsummary) & is.na(mortsummary), FALSE, TRUE))
ggplot(st_transform(country_p,crs=3035)) + geom_sf(fill=NA)+theme_bw()+
geom_point(data=data_avail,aes(x=x,y=y,fill=as.factor(bsummary)),shape=21)+
scale_fill_viridis_d("Biomass indicators",labels=c("none","one","two","three","four"))+
xlab("")+ylab("")
View(data_avail)
?coalesce
View(data_avail)
test = mortality %>% filter(eel_emu_nameshort == "SE_Inla")
mortality <- dbGetQuery(con,"select e.* from datawg.t_eelstock_eel e where eel_qal_id in (0,1,2,3,4) and eel_typ_id in (17,18,19)")
test = mortality %>% filter(eel_emu_nameshort == "SE_Inla")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE,message=FALSE)
library(RPostgres)
library(sf)
library(getPass)
library(ggforce)
library(ggplot2)
library(flextable)
library(tidyverse)
library(yaml)
cred=read_yaml("../../credentials.yml")
con = dbConnect(Postgres(), dbname=cred$dbname,host=cred$host,port=cred$port,user=cred$user, password=getPass())
load("../../R/shiny_data_visualisation/shiny_dv/data/maps_for_shiny.Rdata")
load("../..//R/shiny_data_visualisation/shiny_dv/data/ref_and_eel_data.Rdata")
eu_cou_codes=c("AT",	"BE",	"BG",	"HR",	"CY",	"CZ",	"DK",	"EE",	"FI",	"FR",	"DE",	"GR",	"HU",	"IE",	"IT",	"LV",	"LT",	"LU",	"MT",	"NL",	"PL",	"PT",	"RO",	"SK",	"SI",	"ES",	"SE")
biomass <- dbGetQuery(con,"select e.* from datawg.t_eelstock_eel e  where eel_qal_id in (0,1,2,3,4) and eel_typ_id in (13,14,15,34)")
mortality <- dbGetQuery(con,"select e.* from datawg.t_eelstock_eel e where eel_qal_id in (0,1,2,3,4) and eel_typ_id in (17,18,19)")
nb_country_emu <- dbGetQuery(con,"select count(distinct eel_cou_code),count(distinct(eel_emu_nameshort)) from datawg.t_eelstock_eel
where eel_typ_id in (13, 14, 15, 17, 18, 19,34) and eel_datasource='dc_2021'")
data_avail = rbind.data.frame(mortality,biomass) %>%
filter(!(is.na(eel_value) & eel_missvaluequal!="NP")) %>%
group_by(eel_emu_nameshort) %>%
summarize(b0=sum(eel_typ_id==13)>0,
bbest=sum(eel_typ_id==14)>0,
bcurrent=sum(eel_typ_id==15)>0,
bcurrent_without_stocking_kg=sum(eel_typ_id==34)>0,
suma=sum(eel_typ_id==17)>0,
sumf=sum(eel_typ_id==18)>0,
sumh=sum(eel_typ_id==19)>0) %>%
mutate(eel_emu_nameshort= ifelse(eel_emu_nameshort=="NL_total","NL_Neth",eel_emu_nameshort))
data_avail <- merge(emu_c, data_avail, by.x="emu_nameshort",by.y="eel_emu_nameshort",all.x=TRUE)
data_avail<- st_transform(data_avail, crs=3035)
data_avail$x <-st_coordinates(data_avail)[,1]
data_avail$y <-st_coordinates(data_avail)[,2]
data_avail$x[data_avail$emu_cou_code=="NO"] = 4172612.3
data_avail$y[data_avail$emu_cou_code=="NO"] = 4111023.3
data_avail<- data_avail %>%
mutate(bsummary=coalesce(b0+bbest+bcurrent+bcurrent_without_stocking_kg, 0),
mortsummary=coalesce(suma+sumf+sumh,0),
responded=ifelse(is.na(bsummary) & is.na(mortsummary), FALSE, TRUE))
ggplot(st_transform(country_p,crs=3035)) + geom_sf(fill=NA)+theme_bw()+
geom_point(data=data_avail,aes(x=x,y=y,fill=as.factor(bsummary)),shape=21)+
scale_fill_viridis_d("Biomass indicators",labels=c("none","one","two","three","four"))+
xlab("")+ylab("")
data_avail = rbind.data.frame(mortality,biomass) %>%
filter(!(is.na(eel_value) & eel_missvaluequal!="NP")) %>%
group_by(eel_emu_nameshort) %>%
summarize(b0=sum(eel_typ_id==13)>0,
bbest=sum(eel_typ_id==14)>0,
bcurrent=sum(eel_typ_id==15)>0,
bcurrent_without_stocking_kg=sum(eel_typ_id==34)>0,
suma=sum(eel_typ_id==17)>0,
sumf=sum(eel_typ_id==18)>0,
sumh=sum(eel_typ_id==19)>0) %>%
mutate(eel_emu_nameshort= ifelse(eel_emu_nameshort=="NL_total","NL_Neth",eel_emu_nameshort))
data_avail <- merge(emu_c, data_avail, by.x="emu_nameshort",by.y="eel_emu_nameshort",all.x=TRUE)
data_avail<- st_transform(data_avail, crs=3035)
data_avail$x <-st_coordinates(data_avail)[,1]
data_avail$y <-st_coordinates(data_avail)[,2]
data_avail$x[data_avail$emu_cou_code=="NO"] = 4172612.3
data_avail$y[data_avail$emu_cou_code=="NO"] = 4111023.3
data_avail<- data_avail %>%
mutate(bsummary=coalesce(b0+bbest+bcurrent+bcurrent_without_stocking_kg, 0),
mortsummary=coalesce(suma+sumf+sumh,0),
responded=ifelse(is.na(bsummary) & is.na(mortsummary), FALSE, TRUE))
ggplot(st_transform(country_p,crs=3035)) + geom_sf(fill=NA)+theme_bw()+
geom_point(data=data_avail,aes(x=x,y=y,fill=as.factor(bsummary)),shape=21)+
scale_fill_viridis_d("Biomass indicators",labels=c("none","one","two","three","four"))+
xlab("")+ylab("")
ggsave(filename="/tmp/biom.png",width=16/2.54,height=10/2.54,dpi=300)
getwd()
